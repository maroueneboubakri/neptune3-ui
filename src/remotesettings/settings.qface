module Settings 1.0

@config: {id: "UISettings"}
interface UISettings {
    string language;
    list<string> languages;

    bool twentyFourHourTimeFormat;

    /**
     * 0 is muted and 1.0 is max
     */
    real volume;
    bool muted;
    /*
     * -1.0 left and +1.0 right and 0 is centered
     */
    real balance;

    int theme;
    string accentColor;

    bool rtlMode;

    bool door1Open;
    bool door2Open;
}

@config: {id: "InstrumentCluster"}
interface InstrumentCluster {
  /*
   * In Km/H
   */
  real speed;

  /*
   * In Km/H
   */
  real speedLimit;

  /*
   * In Km/H
   */
  real speedCruise;

  /*
   * Between 0 (inclusive) and 100 (inclusive)
   */
  real ePower;

  /*
   * 0 -> Park
   * 1 -> Neutral
   * 2 -> Drive
   * 3 -> Reverse
   */
  int driveTrainState;

  bool lowBeamHeadlight;
  bool highBeamHeadlight;
  bool fogLight;
  bool stabilityControl;
  bool seatBeltNotFastened;
  bool leftTurn;
  bool rightTurn;
  bool ABSFailure;
  bool parkBrake;
  bool tyrePressureLow;
  bool brakeFailure;
  bool airbagFailure;

  /*
   * Whether the instrument cluster should be in navigation mode
   * in this mode its gauges etc will be reshaped to give more room
   * for the maps navigation content being displayed behind it
   */
  bool navigationMode;

  /** Whether a secondary (cluster) screen is available */
  bool available;
}

@config: {id: "SystemUI"}
interface SystemUI {
  /*
   * Incrementing this value will make sysui switch to display the next
   * available application instrument cluster window.
   *
   * This is a hack. What we really need here is just a plain signal that
   * could be emitted on demand. So that's not really storing a setting
   * but serving as plain RPC.
   */
  int applicationICWindowSwitchCount
}

@config: {id: "ConnectionMonitoring"}
interface ConnectionMonitoring {
    int intervalMS;
    int counter;
}
