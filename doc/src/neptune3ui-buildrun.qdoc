/****************************************************************************
**
** Copyright (C) 2019 Luxoft Sweden AB
** Copyright (C) 2018 Pelagicore AG
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Neptune 3 IVI UI.
**
** $QT_BEGIN_LICENSE:FDL-QTAS$
** Commercial License Usage
** Licensees holding valid commercial Qt Automotive Suite licenses may use
** this file in accordance with the commercial license agreement provided
** with the Software or, alternatively, in accordance with the terms
** contained in a written agreement between you and The Qt Company.  For
** licensing terms and conditions see https://www.qt.io/terms-conditions.
** For further information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
   \page neptune3ui-build-run.html
   \title Neptune 3 UI - Run
   \brief Run Neptune 3 UI

   To install all components of \l{Qt Automotive Suite}, see
   \l{Installing Qt Automotive Suite}. Once you have installed
   Qt Automotive Suite and launched \l{Qt Creator Manual}{Qt Creator}, you can
   run your apps with Neptune 3 UI - on your desktop or on a target device,
   such as Intel NUC.

   Alternatively, you can also build and run \l{Qt Automotive Suite} including
   Neptune 3 UI from the source code. This way you are able to modify any part
   of the code and experiment.

   \section1 Run Neptune 3 UI using Qt Automotive Suite

   See \l{Installing Qt Automotive Suite} to install all components of
   \l{Qt Automotive Suite}.

   Neptune 3 UI depends on \l{Qt Application Manager} and \l{Qt IVI}. It
   provides support for both a Center Console display and an Instrument Cluster
   and uses the Qt IVI plugins to access various services. Neptune 3 UI offers
   a multi-process application model using a central System UI and various apps.
   The System UI provides an application launcher to start and stop apps.
   The Application Manager Plugin for Qt Creator allows a developer to develop
   and deploy apps using the Neptune 3 UI.

   Once the Neptune 3 UI component is selected and installed, you can run the
   binary under
   \c{your-qt-installation-path/qt-version/your-available-platform/neptune3},
   such as \c{/home/qt/5.11.0/gcc-64/neptune3}. If you use Qt Automotive Suite
   on an embedded device, the Neptune 3 UI binary is then located under
   \c{/opt/neptune3/}.


   \section1 Run Neptune 3 UI using the Source Code

   To explore Neptune 3 UI by building all components from the source code
   yourself, refer to the following instructions on how to run Neptune 3 UI
   on your desktop.

   \section2 Platforms

   Neptune 3 UI is regularly tested on these platforms:

   \list
   \li macOS (single-process)
   \li Linux desktop (single-process)
   \li Linux desktop (multi-process)
   \endlist

   \section3 Multi-process UI and Single-process UI

   Multi-process UI is the preferred mode. When in multi-process mode, apps
   run as independent processes, as Wayland clients. In this case, the System
   UI acts as a Wayland server, compositing the app windows in its own QML
   scene, as regular QML items.

   In comparison with single-process mode, all app code run in the same QML
   scene and process as the System UI itself.

   \section2 Prerequisites

   \list
   \li \b{Qt 5.12} or higher
   \li To support multi-process mode, your Qt installation must include the
       \c qtwayland submodule, and be built wiht Open GL ES
       \c{(-opengl es2 -opengles3)}.
   \endlist

   \section2 Dependencies

   \list
   \li \l{Qt Application Manager} 5.12
   \li \l{Qt IVI} 5.12
   \endlist

   \section2 Build and Run Neptune 3 UI

   \list 1

   \li Clone the \l{Qt Application Manager Git Repository}{Qt Application Manager},
       the \l{Qt IVI Git Repository}{Qt IVI} and the
       \l{Neptune3-UI Git Repository}{Neptune3-UI} Git repositories.

   \li Build \l{Qt Application Manager} against Qt 5.12 or higher. See
       \l{Qt Applicaton Manager Installation} for more detailed build
       instructions.

   \li Build \l{Qt IVI} against Qt 5.12 or higher. See
       \l{Qt IVI}{Qt IVI documentation} for more detailed information.

   \li Build Neptune 3 UI by running the following command in a terminal:
   \badcode
   qmake neptune3-ui.pro
   make
   \endcode

   \li Run the following command in a terminal under the \c neptune3-ui installation
   directory:
   \badcode
   ./neptune3-ui -r --start-session-dbus
   \endcode

   \note --start-session-dbus is required when you run Neptune 3 UI on Linux,
   in multi-process mode.

   \endlist

   By default, Neptune style is used and \c{am-config-neptune.yaml} is the
   default configuration file. Hence, to load the LUCEE style for Neptune 3 UI,
   you must specify \c{-c am-config-lucee.yaml} when you start Neptune 3 UI.

   \section2 Develop with Neptune 3 UI using Qt Creator

   Once the project is cloned, built, installed, and all pre-requisites are
   configured, you can use QtCreator as your development tool. The following
   instructions describe how to build and run a project:

   \list

   \li Start QtCreator and open the Neptune 3 UI project file.

   \li Configure the project to use the Qt you have installed
       (see \l{Adding Qt Versions}).

   \li Open your project's build steps configuration in
       \uicontrol{Build} > \uicontrol{Build Settings} > \uicontrol{Build Steps}
       (see \l{Build Steps}{Configuring Build Steps}).

   \li Expand the \e{qmake} \uicontrol{Details} and add an additional argument:
       \c INSTALL_PREFIX=/path/to/your/neptune/install/folder

       \note This argument ensures that Neptune 3 UI is installed to the
       folder that you specify, instead of the default \c opt/neptune3/.

   \li Expand the \e{Make} \uicontrol{Details} and add a make argument, such as
       \c -j8, depending on how many build jobs you want to use on your machine.

   \li Open your project's run configuration in \uicontrol Run. In
       \uicontrol{Run configuration}, choose "neptune3-ui". You can also add
       other application manager options to the command line arguments, such as
       \c{--recreate-database}. See \l{Application Manager Configuration} for
       more information. Make sure that you run "neptune3-ui" from your install
       folder instead of your build folder.

   \li Finally, build and run the project by selecting the \uicontrol{Run}
       button, or \uicontrol{Ctrl + R}.

   \endlist

   \note On Windows, when Neptune 3 UI is built and installed, a
   \c neptune3-ui_wrapper is generated to be able to find the required Qt
   libraries. Run this wrapper instead of the executable file.

   \section2 Configure Neptune 3 UI

   For maintainability, the UI configuration is split into several YAML files,
   as described in the following table:

   \table
   \header
      \li File
      \li Description
   \row
       \li \c am-config-neptune.yaml
       \li Defines the \l{Center Console Display} and Cluster-specific
           configurations. For example, built-in apps and their runtime
           (native or QML), import paths, UI-specific configurations
           (such as full-screen mode), and a main QML file (if it's a QML
           runtime). This YAML file configures Neptune 3 UI to use "neptune"
           style.
   \row
       \li \c am-config-lucee.yaml
       \li Similar to \c am-config-neptune.yaml, but this YAML file configures
           Neptune 3 UI to use "lucee" style.
    \row
       \li \c info.yaml
       \li Defines an app-specific configuration, such as a main QML file and
           its imports.
   \endtable

   The following code is an example of a \c am-config-neptune.yaml file:

   \badcode
    formatVersion: 1
    formatType: am-configuration

    # basic AM functionality - the built-in apps are in 'apps'.
    # installations will go into the standard /tmp/am hierarchy

    applications:
      builtinAppsManifestDir: "apps"
      database: "/tmp/neptune3-ui/apps.db"

    # QML apps will be able to import from modules...

    runtimes:
      qml:
        importPaths: [ "${CONFIG_PWD}/imports_shared" ]

    # ... as well as the SystemUI

    ui:
      fullscreen: yes
      style: "${CONFIG_PWD}/styles/neptune"
      iconThemeName: "neptune"
      iconThemeSearchPaths: [ "${CONFIG_PWD}/imports_shared/assets/icons" ]
      mainQml: "${CONFIG_PWD}/Main.qml"
      importPaths: [ "${CONFIG_PWD}/imports_shared", "${CONFIG_PWD}/imports_system", "${CONFIG_PWD}/sysui" ]
      windowIcon: "${CONFIG_PWD}/imports_shared/assets/icons/neptune/sysui/ic-menu-home.png"

    systemProperties:
      public:
        showCluster: yes
        showHUD: yes
        devMode: yes
      private:
        appStoreServerUrl: 'http://demoappsdeploy.qt.io:8512'

    # development setup: no security

    flags:
      noSecurity: yes
      noUiWatchdog: yes
   \endcode

   The YAML file contains options for system properties to show screens other
   than the Center Console, such as the Instrument Cluster or the HUD. These
   screens are enabled by default. Set \c showCluster or \c showHUD to \c no,
   to let Neptune 3 UI know that these screens should not be shown.

   You can also set the \c devMode option to \c yes or \c no, to enable or
   disable Development Mode in Neptune 3 UI. When enabled, the Sheets app
   is included in the Application Launcher and developers acn see all of the
   components that Neptunen 3 UI supports, to develop an app.

   All of these options are also configurable from the command line as a
   parameter to the \c appman utility. See
   \l{Application Manager Configuration} for more information.

   \badcode
   appman --option 'ui: { fullscreen: no }'
   \endcode

   \note After you have changed the YAML files, you must regenerate the Yocto
   image for your target. See
   \l{Building eLinux image} {Building Embedded Linux Image} for more details.

   \section1 Related Information

   \list
    \li \l{https://doc.qt.io/QtApplicationManager/manifest.html}
           {Manifest Documentation}
    \li \l{https://doc.qt.io/QtApplicationManager/configuration.html}
          {Qt Application Manager Configuration Options}
    \li \l{Neptune 3 UI Application Development}
    \li \l{Building eLinux image} {Building Embedded Linux Image}
    \li \l{Qt Application Manager Git Repository}
    \li \l{Neptune3-UI Git Repository}
   \endlist

*/
